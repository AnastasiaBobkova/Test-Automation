import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import static org.testng.Assert.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class PenTest {

    @Test (expectedExceptions = java.lang.IllegalArgumentException.class)
    public void testPenConstructorInk() {
        Pen myPen = new Pen(-1);
    }

    @Test (expectedExceptions = java.lang.IllegalArgumentException.class)
    public void testPenConstructorSizeLetter() {
        Pen myPen = new Pen(1,-1.0);
    }

    @Test (expectedExceptions = java.lang.IllegalArgumentException.class)
    public void testPenConstructorColor() {
        Pen myPen = new Pen(1,1.0,null);
    }

    @Test
    public void testGetDefaultColor() {
        Pen myPen = new Pen(1,1.0);
        assertEquals(myPen.getColor(),"BLUE");
    }

    @Test
    public void testGetColor() {
        Pen myPen = new Pen(1,1.0, "RED");
        assertEquals(myPen.getColor(),"RED");
    }

    @Test
    public void testDoSomethingElse() {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        System.setOut(new PrintStream(output));
        Pen myPen = new Pen(1);
        myPen.doSomethingElse();
        assertEquals(output.toString().replaceAll("\n", "").replaceAll("\r", ""),"BLUE");
        System.setOut(null);
    }

    @Test (dataProvider = "inkDataProvider")
    public void testIsWork(Pen testPen, Boolean result) {
//        Pen myPen = new Pen(0);
//        assert !myPen.isWork();
        assertEquals(testPen.isWork(), result);
    }

    @DataProvider(name = "inkDataProvider")
    public Object[][] inkProvider() {
        return new Object[][]{
                {new Pen(0), false},
                {new Pen(1), true},
                {new Pen(2), true}
        };
    }

    @Test (dependsOnMethods={"testIsWork"})
    public void testWriteWithoutInk() {
        Pen myPen = new Pen(0);
        assertEquals(myPen.write("word"),"");
    }

    @Test (dependsOnMethods={"testIsWork"})
    public void testWriteEmptyWord() {
        Pen myPen = new Pen(1);
        assertEquals(myPen.write(""),"");
    }

    @Test (dataProvider = "writeDataProvider", dependsOnMethods={"testIsWork"})
    public void generalTestWrite(Pen testPen,String passedWord, String returnedWord) {
        assertEquals(testPen.write(passedWord),returnedWord);
    }

    @DataProvider(name = "writeDataProvider")
    public Object[][] writeDataProvider() {
        return new Object[][]{
                {new Pen(5,1.0), "word","word"},
                {new Pen(5,1.0), "first","first"},
                {new Pen(5,1.0), "second","secon"},
                {new Pen(10,2.0), "hi","hi"},
                {new Pen(10,2.0), "digit","digit"},
                {new Pen(10,2.0), "another","anoth"},
                {new Pen(15,1.5), "testng","testng"},
                {new Pen(15,1.5), "wordtenlet","wordtenlet"},
                {new Pen(15,1.5), "wordmorethantenlet","wordmoreth"}
        };
    }

    @Test (dependsOnMethods={"testIsWork"})
    public void testWriteWithSpaces() {
        Pen myPen = new Pen(10,1.0);
        assertEquals(myPen.write("This is a sentence."),"This is a sen");
    }

    @Test (dependsOnMethods={"testIsWork","testWriteWithoutInk","generalTestWrite"})
    public void testWriteSeveralWords() {
        Pen myPen = new Pen(11,1.0);
        assertEquals(myPen.write("Hello"),"Hello");
        assertEquals(myPen.write("my"),"my");
        assertEquals(myPen.write("friend"),"frie");
        assertEquals(myPen.write("bye"),"");
    }
}