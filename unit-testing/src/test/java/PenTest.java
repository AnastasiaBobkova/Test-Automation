import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import static org.testng.Assert.*;
import java.lang.reflect.Method;
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;

public class PenTest {

    @Test (dataProvider = "penPropsDataProviderPositive")
    public void testPenConstructorWithOneParam(int inkContainerValue) {
        Pen myPen = new Pen(inkContainerValue);
        assertNotNull(myPen);
    }

    @Test (dataProvider = "penPropsDataProviderPositive")
    public void testPenConstructorWithTwoParams(int inkContainerValue, double sizeLetter) {
        Pen myPen = new Pen(inkContainerValue, sizeLetter);
        assertNotNull(myPen);
    }

    @Test (dataProvider = "penPropsDataProviderPositive")
    public void testPenConstructorWithThreeParams(int inkContainerValue, double sizeLetter, String color) {
        Pen myPen = new Pen(inkContainerValue, sizeLetter, color);
        assertNotNull(myPen);
    }

    @DataProvider (name = "penPropsDataProviderPositive")
    public Object[][] getDataFromPenPropsDataProviderPositive(Method m) {
        switch (m.getName()) {
            case "testPenConstructorWithOneParam":
                return new Object[][]{
                        {1},
                };
            case "testPenConstructorWithTwoParams":
                return new Object[][]{
                        {1, 1.0},
                };
            case "testPenConstructorWithThreeParams":
            case "testDoSomethingElse":
                return new Object[][]{
                        {1, 1.0, "BLUE"},
                };
        }
        return null;
    }

    @Test (expectedExceptions = java.lang.IllegalArgumentException.class, dataProvider = "penPropsDataProviderNegative")
    public void testPenConstructorInkNegative(int inkContainerValue) {
        Pen myPen = new Pen(inkContainerValue);
    }

    @Test (expectedExceptions = java.lang.IllegalArgumentException.class, dataProvider = "penPropsDataProviderNegative")
    public void testPenConstructorSizeLetterNegative(int inkContainerValue, double sizeLetter) {
        Pen myPen = new Pen(inkContainerValue, sizeLetter);
    }

    @Test (expectedExceptions = java.lang.IllegalArgumentException.class, dataProvider = "penPropsDataProviderNegative")
    public void testPenConstructorColorNegative(int inkContainerValue, double sizeLetter, String color) {
        Pen myPen = new Pen(inkContainerValue, sizeLetter, color);
    }

    @DataProvider (name = "penPropsDataProviderNegative")
    public Object[][] getDataFromPenPropsDataProviderNegative(Method m) {
        switch (m.getName()) {
            case "testPenConstructorInkNegative":
                return new Object[][]{
                        {-1}
                };
            case "testPenConstructorSizeLetterNegative":
                return new Object[][]{
                        {1,0.0},
                        {1,-1.0}
                };
            case "testPenConstructorColorNegative":
                return new Object[][]{
                        {1,1.0,null},
                        {1,1.0,""},
                        {1,1.0," "}
                };
        }
        return null;
    }

    @Test (dataProvider = "penColorDataProvider", dependsOnMethods = {"testPenConstructorWithOneParam","testPenConstructorWithTwoParams"})
    public void testGetColor(int inkContainerValue, double sizeLetter, String color, String expectedColor) {
        Pen myPen = new Pen(inkContainerValue, sizeLetter, color);
        assertEquals(myPen.getColor(),expectedColor);
    }

    @DataProvider (name = "penColorDataProvider")
    public Object[][] getDataFromPenColorDataProvider() {
            return new Object[][]{
                    {1, 1.0, "RED", "RED"}
            };
    }

    @Test (dataProvider = "penPropsDataProviderPositive", dependsOnMethods = "testPenConstructorWithOneParam")
    public void testDoSomethingElse(int inkContainerValue, double sizeLetter, String color) {
        ByteArrayOutputStream output = new ByteArrayOutputStream();
        System.setOut(new PrintStream(output));
        Pen myPen = new Pen(inkContainerValue, sizeLetter, color);
        myPen.doSomethingElse();
        assertEquals(output.toString().trim(),color);
        System.setOut(null);
    }

    @Test (dataProvider = "penWorkDataProvider", dependsOnMethods = "testPenConstructorWithOneParam")
    public void testIsWork(int inkContainerValue, Boolean result) {
        Pen myPen = new Pen(inkContainerValue);
        assertEquals(myPen.isWork(), result);
    }

    @DataProvider (name = "penWorkDataProvider")
    public Object[][] getDataFromPenWorkDataProvider() {
        return new Object[][]{
                {0, false},
                {1, true},
                {2, true}
        };
    }

    @Test (dataProvider = "writeDataProvider", dependsOnMethods={"testPenConstructorWithTwoParams","testIsWork"})
    public void testWrite(int inkContainerValue, double sizeLetter, String passedWord, String writtenWord) {
        Pen myPen = new Pen(inkContainerValue, sizeLetter);
        assertEquals(myPen.write(passedWord),writtenWord);
    }

    @Test (dataProvider = "writeDataProvider", dependsOnMethods={"testPenConstructorWithTwoParams","testIsWork","testWrite"})
    public void testWriteSeveralWords(int inkContainerValue, double sizeLetter, String firstWord, String secondWord, String writtenWord) {
        Pen myPen = new Pen(inkContainerValue, sizeLetter);
        myPen.write(firstWord);
        assertEquals(myPen.write(secondWord),writtenWord);
    }

    @DataProvider (name = "writeDataProvider")
    public Object[][] getDataFromWriteDataProvider(Method m) {
        if (m.getName().equals("testWrite")) {
            return new Object[][]{
                    {0, 1.0, "noInk", ""},
                    {1, 1.0, "", ""},
                    {5, 1.0, "word", "word"},
                    {5, 1.0, "first", "first"},
                    {5, 1.0, "second", "secon"},
                    {10, 2.0, "hi", "hi"},
                    {10, 2.0, "digit", "digit"},
                    {10, 2.0, "another", "anoth"},
                    {15, 1.5, "testng", "testng"},
                    {15, 1.5, "wordtenlet", "wordtenlet"},
                    {15, 1.5, "wordmorethantenlet", "wordmoreth"},
                    {10, 1.0, "This is a sentence.", "This is a sen"}
            };
        }
        if (m.getName().equals("testWriteSeveralWords")) {
            return new Object[][]{
                    {10, 1.0, "Hello", "world", "world"},
                    {8, 1.0, "Good", "morning", "morn"},
                    {2, 1.0, "QA", "engineer", ""},
                    {4, 1.0, "Something", "else", ""}
            };
        }
        return null;
    }
}